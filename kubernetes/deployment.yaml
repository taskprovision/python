apiVersion: apps/v1
kind: Deployment
metadata:
  name: taskprovision
  namespace: taskprovision
  labels:
    app: taskprovision
    component: api
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: taskprovision
      component: api
  template:
    metadata:
      labels:
        app: taskprovision
        component: api
    spec:
      containers:
      - name: taskprovision
        image: taskprovision/taskprovision:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: taskprovision-config
        - secretRef:
            name: taskprovision-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: taskprovision-uploads-pvc
      - name: logs
        emptyDir: {}
      restartPolicy: Always

---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: taskprovision
  labels:
    app: taskprovision
    component: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: taskprovision
      component: database
  template:
    metadata:
      labels:
        app: taskprovision
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "taskprovision"
        - name: POSTGRES_USER
          value: "taskprovision"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: taskprovision-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - taskprovision
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - taskprovision
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: taskprovision
  labels:
    app: taskprovision
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taskprovision
      component: cache
  template:
    metadata:
      labels:
        app: taskprovision
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
# Ollama AI Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
  namespace: taskprovision
  labels:
    app: taskprovision
    component: ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taskprovision
      component: ai
  template:
    metadata:
      labels:
        app: taskprovision
        component: ai
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: ollama
        env:
        - name: OLLAMA_ORIGINS
          value: "*"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        volumeMounts:
        - name: ollama-data
          mountPath: /root/.ollama
        livenessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: ollama-data
        persistentVolumeClaim:
          claimName: ollama-data-pvc

---
# Celery Worker
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: taskprovision
  labels:
    app: taskprovision
    component: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: taskprovision
      component: worker
  template:
    metadata:
      labels:
        app: taskprovision
        component: worker
    spec:
      containers:
      - name: celery-worker
        image: taskprovision/taskprovision:latest
        command: ["celery", "-A", "taskprovision.celery", "worker", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: taskprovision-config
        - secretRef:
            name: taskprovision-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: taskprovision-uploads-pvc

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: taskprovision-uploads-pvc
  namespace: taskprovision
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: taskprovision
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ollama-data-pvc
  namespace: taskprovision
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi